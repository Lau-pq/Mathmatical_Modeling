from question1_2 import solve_all
import numpy as np


def ave_power(b, p):
    """定义目标函数"""
    x1 = np.array([-2])
    v1 = np.array([0])
    x2 = np.array([-1.8])
    v2 = np.array([0])
    x1, v1, x2, v2 = solve_all(x1, v1, x2, v2, m3=1165.992, omega=2.2143, f=4890, b0=b, p=p, b1=167.8395)
    # x1, v1, x2, v2 = solve_all(x1, v1, x2, v2, m3=1335.535, f=6250, omega=1.4005, b0=b, p=p, b1=656.3616)
    y = b * np.abs(v1 - v2) ** (2 + p)
    all_power = 0
    for i in range(len(y)-2001, len(y) - 1):
        all_power += (y[i] + y[i+1]) * 0.01 / 2
    ave_power = all_power / (2000 * 0.01)
    return ave_power


DNA_SIZE = 24 # DNA长度 二进制编码长度
POP_SIZE = 200 # 初始种群数量
N_GENERATIONS = 50  # 进化代数

X_BOUND = [0.35, 0.45]
Y_BOUND = [0, 0.05]

def translateDNA(pop):
    '''解码'''
    x_pop = pop[:, 1::2] # 奇数列表示x
    y_pop = pop[:, ::2] # 偶数列表示y
    # pop:(POP_SIZE * DNA_SIZE) * (DNA_SIZE, 1) --> (POP_SIZE, 1) 完成解码
    x = x_pop.dot(2 ** np.arange(DNA_SIZE)[::-1]) / float(2 ** DNA_SIZE - 1) * (X_BOUND[1] - X_BOUND[0]) + X_BOUND[0]
    y = y_pop.dot(2 ** np.arange(DNA_SIZE)[::-1]) / float(2 ** DNA_SIZE - 1) * (Y_BOUND[1] - Y_BOUND[0]) + Y_BOUND[0]
    return x, y

def translateDNA_1(pop):
    '''解码'''
    x_pop = pop[1::2] # 奇数列表示x
    y_pop = pop[::2] # 偶数列表示y
    # pop:(1 * DNA_SIZE) * (DNA_SIZE, 1) --> (1, 1) 完成解码
    x = x_pop.dot(2 ** np.arange(DNA_SIZE)[::-1]) / float(2 ** DNA_SIZE - 1) * (X_BOUND[1] - X_BOUND[0]) + X_BOUND[0]
    y = y_pop.dot(2 ** np.arange(DNA_SIZE)[::-1]) / float(2 ** DNA_SIZE - 1) * (Y_BOUND[1] - Y_BOUND[0]) + Y_BOUND[0]
    return x, y

def get_fitness(pop):
    '''求最大值的适应度函数'''
    x, y = translateDNA(pop)
    pred = [0] * POP_SIZE
    for i in range(POP_SIZE):
        pred[i] = ave_power(x[i] * 1e5, y[i])
    return (pred - np.min(pred)) + 1e-3 # 防止适应度出现负值

def select(pop, fitness):
    '''自然选择, 适应度高的被选择机会多'''
    idx = np.random.choice(np.arange(POP_SIZE), size=POP_SIZE, replace=True, p=(fitness)/(fitness.sum())) # 轮盘赌选择
    return pop[idx]

def crossover_and_mutation(pop, CROSSOVER_RATE=0.8):
    '''交叉、变异'''
    new_pop = []
    for father in pop: # 遍历种群中的每一个个体，将该个体作为父亲
        child = father # 孩子先得到父亲的全部基因
        mother = pop[np.random.randint(POP_SIZE)] # 在种群中选择另一个个体，并将该个体作为母亲
        x_child, y_child = translateDNA_1(child)
        x_mother, y_mother = translateDNA_1(mother)
        if ave_power(x_child, y_child) < ave_power(x_mother, y_mother): # 基因型差
            if np.random.rand() < CROSSOVER_RATE: # 一定概率发生交叉
                cross_points = np.random.randint(low=0, high=DNA_SIZE * 2) # 随机产生交叉的点
                if cross_points % 2 == 0:
                    child[cross_points:] = mother[cross_points:] # 孩子得到位于交叉点后母亲的基因
                else:
                    child[:cross_points] = mother[:cross_points] # 孩子得到位于交叉点前母亲的基因
            else:
                mutation(child)  # 基因型差后代有一定的机率发生变异
        new_pop.append(child)
    return new_pop


def mutation(child, MUTATION_RATE=0.8):
    '''突变'''
    if np.random.rand() < MUTATION_RATE: # 以 MUTATION_RATE 的概率进行变异
        mutate_point = np.random.choice(np.arange(0, DNA_SIZE * 2), size=5, replace=False)
        child[mutate_point] = child[mutate_point] ^ 1 # 将变异点进行二进制反转

def print_info(pop):
    '''打印基因型'''
    fitness = get_fitness(pop)
    max_fitness_index = np.argmax(fitness)
    x, y = translateDNA(pop)
    print('最优的基因型:', pop[max_fitness_index])
    print('(x, y):', (x[max_fitness_index], y[max_fitness_index]))
    print('此时最优解:', ave_power(x[max_fitness_index] * 1e5, y[max_fitness_index]))


if __name__ == '__main__':
    print(ave_power(3.78260735e+04, 1.52588182e-06))
    print(ave_power(37779, 0))

# [[  0.           0.           0.           0.           0.
#     0.           0.           0.           0.           0.
#     0.           0.           0.           0.           0.
#     0.           0.           0.           0.           0.
#     0.        ]
#  [ 61.22100772  55.4293993   50.1867922   45.44120494  41.14585926
#    37.25769652  33.73824322  30.55234457  27.66837099  25.0577124
#    22.69444539  20.55518303  18.61877996  16.86605636  15.27968692
#    13.84398457  12.54472965  11.3690495   10.30527399   9.34282364
#     8.4721077 ]
#  [114.94107222 104.41505537  94.85096268  86.15784646  78.25373666
#    71.06666619  64.53110721  58.58799202  53.1841617   48.27156078
#    43.80632959  39.74836178  36.06136952  32.71221539  29.67069619
#    26.90918778  24.40251627  22.12778265  20.06400991  18.19212198
#    16.49468938]
#  [158.49256022 144.81951665 132.31009398 120.8503133  110.34380349
#   100.70851484  91.87196194  83.77099201  76.34628777  69.54653874
#    63.32249031  57.62991944  52.42679913  47.67469533  43.33733928
#    39.38119819  35.7750316   32.48988555  29.49885341  26.77713263
#    24.3017267 ]
#  [190.58016715 175.46528056 161.50525043 148.57864227 136.59545532
#   125.47753136 115.16521014 105.60357654  96.74700073  88.55209011
#    80.97992418  73.99283373  67.55433761  61.62992081  56.18611261
#    51.19027959  46.61128995  42.41901269  38.58491508  35.0817537
#    31.8839191 ]
#  [211.81360965 196.70691693 182.58648402 169.34123265 156.89561152
#   145.19272272 134.18837408 123.85063867 114.15231212 105.06930248
#    96.58036289  88.66279612  81.29431044  74.45253191  68.11302603
#    62.25169178  56.84248924  51.85998206  47.27820682  43.07135117
#    39.21425377]
#  [223.98544727 209.91145096 196.56736934 183.86400959 171.73916436
#   160.16578244 149.11664186 138.58540168 128.5659509  119.05554215
#   110.05304663 101.556239    93.56032755  86.05874975  79.04157618
#    72.4968456   66.40954205  60.76237906  55.53647471  50.71067889
#    46.26354547]
#  [229.24194446 216.80778895 204.82144656 193.21133504 181.94359852
#   170.99977767 160.38381649 150.10525719 140.17776745 130.62121294
#   121.45115779 112.68521782 104.33720215  96.41741293  88.93233096
#    81.88451376  75.27215377  69.08921541  63.32612175  57.9704623
#    53.00658038]
#  [229.5640137  219.04869281 208.71174396 198.5017777  188.39826501
#   178.40517209 168.53822151 158.82302965 149.29223747 139.97899666
#   130.91597388 122.1365131  113.67136712 105.54678972  97.78434668
#    90.401643    83.41032617  76.81739387  70.6245597   64.82885913
#    59.42349633] # 0.4
#  [226.55582946 218.01379864 209.41575493 200.72823193 191.94046329
#   183.06675919 174.13604171 165.18448197 156.25483516 147.39023494
#   138.6396294  130.04592271 121.65380389 113.50262653 105.6277948
#    98.05975014  90.82401546  83.939351    77.41955817  71.27244493
#    65.5005378 ]
#  [221.41995625 214.77084797 207.8794777  200.71404485 193.27927433
#   185.59238913 177.68889695 169.60902769 161.40594531 153.12984673
#   144.83382165 136.57373062 128.40130223 120.36657877 112.51632963
#   104.89181035  97.52971705  90.46081731  83.70974522  77.29527141
#    71.22952545]
#  [215.01418035 210.1075668  204.81163969 199.10232541 192.98719145
#   186.48445627 179.63124751 172.47454161 165.06378463 157.4576651
#   149.71255415 141.886633   134.0429306  126.23439223 118.51832143
#   110.9435362  103.55665567  96.39787807  89.50236862  82.89825917
#    76.60755521]
#  [207.92941653 204.5838968  200.74184803 196.38618999 191.51430625
#   186.1507735  180.33188228 174.09958467 167.50626816 160.61012255
#   153.46955086 146.14838047 138.70764972 131.20730434 123.709928
#   116.27049745 108.94321796 101.7760653   94.81222161  88.08886864
#    81.63700794]
#  [200.56166048 198.59105152 196.05325724 192.92321896 189.20267635
#   184.91082742 180.07856372 174.74568908 168.96560486 162.79307555
#   156.28569181 149.50739091 142.51806675 135.38580034 128.16973936
#   120.93333395 113.7333574  106.62552196  99.65922834  92.87923494
#    86.323898  ]
#  [193.16947414 192.39762411 191.01068759 188.98397196 186.3123767
#   183.0092932  179.10085049 174.63000161 169.64010465 164.1819049
#   158.31436645 152.09557185 145.59094278 138.86247533 131.9747061
#   124.99154897 117.97369288 110.98080244 104.06773914  97.28517997
#    90.67809773]
#  [185.91669774 186.18120493 185.80547227 184.75722144 183.03169188
#   180.63305426 177.58715509 173.92524828 169.68806773 164.92530014
#   159.68822173 154.03484405 148.02636616 141.72639649 135.19712828
#   128.50487182 121.71080275 114.87795686 108.06429368 101.32556228
#    94.7118829 ]
#  [178.9029278  180.05925242 180.56609953 180.38595823 179.50832904
#   177.93197189 175.67670265 172.76882126 169.24326136 165.14282865
#   160.51983664 155.4241524  149.91645431 144.0556332  137.90605393
#   131.5293328  124.99105977 118.35283545 111.67669765 105.02060891
#    98.43946556]
#  [172.18474277 174.10686824 175.38085679 175.96659864 175.84433395
#   175.01304761 173.47940929 171.26924988 168.40970946 164.9401382
#   160.90449043 156.35367325 151.33997535 145.92220821 140.1610144
#   134.11835952 127.85752403 121.44119073 114.93258635 108.39172347
#   101.8766025 ]
#  [165.79028242 168.36820462 170.3088426  171.56726547 172.11733129
#   171.95593315 171.08128822 169.5128384  167.27319837 164.39738708
#   160.92183203 156.8955636  152.36482692 147.38732431 142.01824168
#   136.3195705  130.35124037 124.1770463  117.85963856 111.46075156
#   105.03966026]
#  [159.72915925 162.86864841 165.38685778 167.23596807 168.38368718
#   168.82358622 168.54752635 167.5678056  165.90261414 163.58327646
#   160.6392955  157.11380619 153.05278526 148.50544558 143.52724791
#   138.17610223 132.51026964 126.59272551 120.48472054 114.24868074
#   107.9450902 ]
#  [153.9991577  157.61848471 160.63662971 163.00489383 164.6861438
#   165.66284466 165.9295017  165.48953757 164.35643047 162.55352724
#   160.11113709 157.06263794 153.45255169 149.32442518 144.73197887
#   139.7279273  134.3694674  128.71799108 122.83270782 116.77626048
#   110.60937515]]


